####################################################################
# Ian Leuty
# ileuty@pdx.edu
# 4/17/2025
# CS350 Spring 2025
# Homework 3
#####################################################################
# pytest suite to verify merge_uniq with 50 diverse test cases
#####################################################################
#

import pytest
from merge_rm_duplicates_functions import merge_uniq

@pytest.mark.parametrize("array1, array2, merged_array", [
    # Assignement test cases
    ([1, 2, 4, 5], [2, 3, 4, 5, 6], [1,2,3,4,5,6]),
    ([1, 1, 1], [1, 1], [1]),
    ([], [1, 2, 3], [1, 2, 3]),
    ([1, 3, 5], [2, 4, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]),
    ([1, 2, 3], [4, 5, 6], [1, 2, 3, 4, 5, 6]),
    ([4, 5, 6], [1, 2], [1, 2, 4, 5, 6]),
    ([1, 2, 2, 3], [2, 3, 4, 4, 4], [1, 2, 3, 4]),
    ([0, 5, 10, 56, 60, 100, 200], [2, 3, 10, 60, 70, 80, 200, 500], [0, 2, 3, 5, 10, 56, 60, 70, 80, 100, 200, 500]),

    # Basic test cases
    ([1, 2, 3], [4, 5, 6], [1, 2, 3, 4, 5, 6]),
    ([1, 3, 5], [2, 4, 6], [1, 2, 3, 4, 5, 6]),
    ([1, 2, 3], [3, 4, 5], [1, 2, 3, 4, 5]),

    # Empty arrays
    ([], [], []),
    ([1, 2, 3], [], [1, 2, 3]),
    ([], [4, 5, 6], [4, 5, 6]),

    # Duplicates within arrays
    ([1, 1, 2, 3], [4, 5, 6], [1, 2, 3, 4, 5, 6]),
    ([1, 2, 3], [4, 4, 5, 6], [1, 2, 3, 4, 5, 6]),
    ([1, 1, 2, 2, 3, 3], [4, 4, 5, 5, 6, 6], [1, 2, 3, 4, 5, 6]),

    # Overlapping elements
    ([1, 2, 3, 4], [3, 4, 5, 6], [1, 2, 3, 4, 5, 6]),
    ([1, 3, 5, 7], [2, 3, 4, 5], [1, 2, 3, 4, 5, 7]),
    ([5, 10, 15, 20], [5, 15, 25], [5, 10, 15, 20, 25]),

    # Negative numbers
    ([-3, -2, -1], [1, 2, 3], [-3, -2, -1, 1, 2, 3]),
    ([-3, -1, 1, 3], [-2, 0, 2], [-3, -2, -1, 0, 1, 2, 3]),
    ([-5, -5, -3, -1], [-3, -1, 0], [-5, -3, -1, 0]),

    # Large differences in array sizes
    ([1], [2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]),
    ([1, 2, 3, 4, 5], [6], [1, 2, 3, 4, 5, 6]),
    ([1], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]),

    # Single element arrays
    ([5], [5], [5]),
    ([3], [7], [3, 7]),
    ([9], [-4], [-4, 9]),

    # Already sorted arrays
    ([1, 3, 5, 7], [2, 4, 6, 8], [1, 2, 3, 4, 5, 6, 7, 8]),
    ([1, 2, 3, 4], [5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8]),
    ([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),

    # Unsorted arrays
    ([3, 1, 4, 2], [8, 6, 5, 7], [1, 2, 3, 4, 5, 6, 7, 8]),
    ([9, 5, 1, 3, 7], [8, 4, 2, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9]),
    ([7, 3, 9, 1, 5], [10, 8, 2, 4, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),

    # Complex cases with mixed properties
    ([1, 3, 3, 5, 7], [2, 3, 6, 6, 8], [1, 2, 3, 5, 6, 7, 8]),
    ([-2, 0, 0, 5, 9], [-5, -2, 0, 7, 9], [-5, -2, 0, 5, 7, 9]),
    ([3, 3, 3, 3], [3, 3, 3, 3], [3]),

    # Floating point numbers
    ([1.1, 2.2, 3.3], [4.4, 5.5, 6.6], [1.1, 2.2, 3.3, 4.4, 5.5, 6.6]),
    ([1.5, 2.5, 3.5], [1.5, 3.5, 5.5], [1.5, 2.5, 3.5, 5.5]),
    ([0.1, 0.2, 0.3], [0.2, 0.3, 0.4], [0.1, 0.2, 0.3, 0.4]),

    # Non-consecutive integers
    ([2, 5, 8, 11], [3, 7, 13, 17], [2, 3, 5, 7, 8, 11, 13, 17]),
    ([10, 30, 50, 70], [20, 40, 60, 80], [10, 20, 30, 40, 50, 60, 70, 80]),
    ([100, 500, 900], [300, 700], [100, 300, 500, 700, 900]),

    # Arrays with completely duplicate elements
    ([5, 5, 5], [10, 10, 10], [5, 10]),
    ([1, 1, 1], [1, 1, 1], [1]),
    ([7, 7, 7, 7], [3, 3, 3], [3, 7]),

    # Arrays with large ranges
    ([-1000, 0, 1000], [-500, 500, 1500], [-1000, -500, 0, 500, 1000, 1500]),
    ([10**3, 10**4, 10**5], [-10**3, -10**4, -10**5], [-10**5, -10**4, -10**3, 10**3, 10**4, 10**5]),
    ([2**10, 2**20], [2**5, 2**15, 2**25], [2**5, 2**10, 2**15, 2**20, 2**25])
    ])
def test_merge_uniq(array1, array2, merged_array):
    assert (merge_uniq(array1, array2) == merged_array)




