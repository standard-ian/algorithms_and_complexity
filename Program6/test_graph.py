import pytest
from graph import spread, edges

####################################################################
# Ian Leuty
# ileuty@pdx.edu
# 5/21/2025
# CS350 Spring 2025
# Homework 6
#####################################################################
# pytest suite for graph fuctions
#####################################################################
@pytest.mark.parametrize("adj_list, num_people, start_node, result", [
                    # case 1
                      ({1 : [2, 5, 7],
                        2 : [1, 3, 5, 6, 8],
                        3 : [2, 6],
                        4 : [5, 8, 9],
                        5 : [1, 2, 4],
                        6 : [2, 3],
                        7 : [1],
                        8 : [2, 4],
                        9 : [4, 10],
                        10 : [9]}, 8, 2, 3),

                    # case 2
                      ({1 : [2, 3],
                        2 : [1, 3, 4],
                        3 : [1, 2, 4, 5],
                        4 : [2, 3, 5],
                        5 : [3, 4]}, 3, 1, 2),

                    # case 3
                      ({1 : [2, 3, 5],
                        2 : [1, 4],
                        3 : [1, 5],
                        4 : [2, 7],
                        5 : [1, 3, 6],
                        6 : [5],
                        7 : [4]}, 5, 7, 4),

                    # case 4
                      ({1 : [2, 3, 4, 5, 6, 7, 8, 9, 10],
                        2 : [1],
                        3 : [1],
                        4 : [1],
                        5 : [1],
                        6 : [1],
                        7 : [1],
                        8 : [1],
                        9 : [1],
                        10 : [1]}, 5, 1, 1),

                    # case 5 - Linear chain graph
                      ({1 : [2],
                        2 : [1, 3],
                        3 : [2, 4],
                        4 : [3, 5],
                        5 : [4]}, 4, 1, 4),

                    # case 6 - Star graph with center start
                      ({1 : [2, 3, 4, 5, 6],
                        2 : [1],
                        3 : [1],
                        4 : [1],
                        5 : [1],
                        6 : [1]}, 3, 1, 1),

                    # case 7 - Complete graph (everyone connected to everyone)
                      ({1 : [2, 3, 4, 5],
                        2 : [1, 3, 4, 5],
                        3 : [1, 2, 4, 5],
                        4 : [1, 2, 3, 5],
                        5 : [1, 2, 3, 4]}, 4, 1, 1),

                    # case 8 - Binary tree structure
                      ({1 : [2, 3],
                        2 : [1, 4, 5],
                        3 : [1, 6, 7],
                        4 : [2],
                        5 : [2],
                        6 : [3],
                        7 : [3]}, 6, 1, 2),

                    # case 9 - Single node with no connections
                      ({1 : []}, 0, 1, 0),

                    # case 10 - Two disconnected components
                      ({1 : [2, 3],
                        2 : [1],
                        3 : [1],
                        4 : [5],
                        5 : [4]}, 2, 1, 1),

                    # case 11 - Cycle graph
                      ({1 : [2, 6],
                        2 : [1, 3],
                        3 : [2, 4],
                        4 : [3, 5],
                        5 : [4, 6],
                        6 : [5, 1]}, 5, 1, 3),

                    # case 12 - Hub and spoke with extended branches
                      ({1 : [2, 3, 4],
                        2 : [1, 5, 6],
                        3 : [1, 7],
                        4 : [1, 8, 9],
                        5 : [2],
                        6 : [2],
                        7 : [3],
                        8 : [4],
                        9 : [4]}, 7, 1, 2),

                    # case 13 - Dense cluster with extension
                      ({1 : [2, 3, 4],
                        2 : [1, 3, 4, 5],
                        3 : [1, 2, 4],
                        4 : [1, 2, 3, 6],
                        5 : [2, 7],
                        6 : [4],
                        7 : [5]}, 6, 1, 3),

                    # case 14 - Long path with branch
                      ({1 : [2],
                        2 : [1, 3, 8],
                        3 : [2, 4],
                        4 : [3, 5],
                        5 : [4, 6],
                        6 : [5, 7],
                        7 : [6],
                        8 : [2]}, 6, 1, 5),

                    # case 15 - Star from leaf node
                      ({1 : [2, 3, 4, 5, 6],
                        2 : [1],
                        3 : [1],
                        4 : [1],
                        5 : [1],
                        6 : [1]}, 4, 2, 2),

                    # case 16 - Grid-like structure
                      ({1 : [2, 4],
                        2 : [1, 3, 5],
                        3 : [2, 6],
                        4 : [1, 5, 7],
                        5 : [2, 4, 6, 8],
                        6 : [3, 5, 9],
                        7 : [4, 8],
                        8 : [5, 7, 9],
                        9 : [6, 8]}, 8, 1, 4)
    ])
def test_spread(adj_list, num_people, start_node, result):
    assert (result == spread(adj_list, num_people, start_node))
@pytest.mark.parametrize("adj_list, start, end, result", [
                    # case 1 - Changed from 8->2 (dist 3) to 1->6 (dist 3)
                      ({1 : [2, 5, 7],
                        2 : [1, 3, 5, 6, 8],
                        3 : [2, 6],
                        4 : [5, 8, 9],
                        5 : [1, 2, 4],
                        6 : [2, 3],
                        7 : [1],
                        8 : [2, 4],
                        9 : [4, 10],
                        10 : [9]}, 1, 6, 2),

                    # case 2 - Changed from 3->1 (dist 2) to 5->2 (dist 2)
                      ({1 : [2, 3],
                        2 : [1, 3, 4],
                        3 : [1, 2, 4, 5],
                        4 : [2, 3, 5],
                        5 : [3, 4]}, 5, 2, 2),

                    # case 3 - Changed from 5->7 (dist 4) to 2->6 (dist 3)
                      ({1 : [2, 3, 5],
                        2 : [1, 4],
                        3 : [1, 5],
                        4 : [2, 7],
                        5 : [1, 3, 6],
                        6 : [5],
                        7 : [4]}, 2, 6, 3),

                    # case 4 - Changed from 5->1 (dist 1) to 3->7 (dist 2)
                      ({1 : [2, 3, 4, 5, 6, 7, 8, 9, 10],
                        2 : [1],
                        3 : [1],
                        4 : [1],
                        5 : [1],
                        6 : [1],
                        7 : [1],
                        8 : [1],
                        9 : [1],
                        10 : [1]}, 3, 7, 2),

                    # case 5 - Changed from 4->1 (dist 4) to 1->5 (dist 4)
                      ({1 : [2],
                        2 : [1, 3],
                        3 : [2, 4],
                        4 : [3, 5],
                        5 : [4]}, 1, 5, 4),

                    # case 6 - Changed from 3->1 (dist 1) to 2->5 (dist 2)
                      ({1 : [2, 3, 4, 5, 6],
                        2 : [1],
                        3 : [1],
                        4 : [1],
                        5 : [1],
                        6 : [1]}, 2, 5, 2),

                    # case 7 - Changed from 4->1 (dist 1) to 2->5 (dist 1)
                      ({1 : [2, 3, 4, 5],
                        2 : [1, 3, 4, 5],
                        3 : [1, 2, 4, 5],
                        4 : [1, 2, 3, 5],
                        5 : [1, 2, 3, 4]}, 2, 5, 1),

                    # case 8 - Changed from 6->1 (dist 2) to 4->7 (dist 3)
                      ({1 : [2, 3],
                        2 : [1, 4, 5],
                        3 : [1, 6, 7],
                        4 : [2],
                        5 : [2],
                        6 : [3],
                        7 : [3]}, 4, 7, 4),

                    # case 9 - Changed from 0->1 (dist 0) to 1->1 (dist 0, self-loop)
                      ({1 : []}, 1, 1, 0),

                    # case 10 - Changed from 2->1 (dist 1) to 3->2 (dist 2)
                      ({1 : [2, 3],
                        2 : [1],
                        3 : [1],
                        4 : [5],
                        5 : [4]}, 3, 2, 2),

                    # case 11 - Changed from 5->1 (dist 3) to 3->6 (dist 3)
                      ({1 : [2, 6],
                        2 : [1, 3],
                        3 : [2, 4],
                        4 : [3, 5],
                        5 : [4, 6],
                        6 : [5, 1]}, 3, 6, 3),

                    # case 12 - Changed from 7->1 (dist 2) to 5->9 (dist 3)
                      ({1 : [2, 3, 4],
                        2 : [1, 5, 6],
                        3 : [1, 7],
                        4 : [1, 8, 9],
                        5 : [2],
                        6 : [2],
                        7 : [3],
                        8 : [4],
                        9 : [4]}, 5, 9, 4),

                    # case 13 - Changed from 6->1 (dist 3) to 7->3 (dist 4)
                      ({1 : [2, 3, 4],
                        2 : [1, 3, 4, 5],
                        3 : [1, 2, 4],
                        4 : [1, 2, 3, 6],
                        5 : [2, 7],
                        6 : [4],
                        7 : [5]}, 7, 3, 3),

                    # case 14 - Changed from 6->1 (dist 5) to 8->3 (dist 4)
                      ({1 : [2],
                        2 : [1, 3, 8],
                        3 : [2, 4],
                        4 : [3, 5],
                        5 : [4, 6],
                        6 : [5, 7],
                        7 : [6],
                        8 : [2]}, 8, 3, 2),

                    # case 15 - Changed from 4->2 (dist 2) to 6->3 (dist 2)
                      ({1 : [2, 3, 4, 5, 6],
                        2 : [1],
                        3 : [1],
                        4 : [1],
                        5 : [1],
                        6 : [1]}, 6, 3, 2),

                    # case 16 - Changed from 8->1 (dist 4) to 7->3 (dist 3)
                      ({1 : [2, 4],
                        2 : [1, 3, 5],
                        3 : [2, 6],
                        4 : [1, 5, 7],
                        5 : [2, 4, 6, 8],
                        6 : [3, 5, 9],
                        7 : [4, 8],
                        8 : [5, 7, 9],
                        9 : [6, 8]}, 7, 3, 4)
    ])
def test_edges(adj_list, start, end, result):
    assert (edges(adj_list, start, end) == result)
